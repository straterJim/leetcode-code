class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.size = k
        self.queue = [None]*self.size
        self.f = None
        self.r = None        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if self.isEmpty():
            self.f=0
            self.r=0
            self.queue[self.r]=value
            return True
        if self.isFull()==False:
            self.r=(self.r+1)%self.size
            self.queue[self.r] = value
            return True
        return False        

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if self.isEmpty():
            return False
        self.queue[self.f] = None
        self.f=(self.f+1)%self.size
        return True
        

    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if self.isEmpty()== False:
            return self.queue[self.f] 
        return -1

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if self.isEmpty()==False:
            return self.queue[self.r] 
        return -1

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        for i in range(self.size):
            if self.queue[i] != None:
                return False
        return True
            

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        for i in range(self.size):
            if self.queue[i] == None:
                return False
        return True
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
